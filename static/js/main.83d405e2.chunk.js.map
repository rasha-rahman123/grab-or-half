{"version":3,"sources":["RoundMeter.js","CenterMessage.js","Tutorial.js","Header.js","PlayerHud.js","CurrentScoreboard.js","App.js","serviceWorker.js","index.js"],"names":["text","RoundMeter","setTimeout","props","dispatch","type","this","inGame","isOffering","isChoosing","timeLeft","botTime","click","botReady","className","round","toString","endState","id","React","Component","connect","state","CenterMessage","handleRound","handleGameOver","window","location","reload","console","log","offer","choice","Math","style","display","flexDirection","justifyContent","onClick","Tutorial","fontWeight","textDecoration","color","cursor","Header","useState","showTut","setShow","styles","clicked","grabStat","halfStat","PlayerHud","handleGrab","handleHalf","visibility","backgroundColor","CurrentScoreboard","wallet","initState","random","store","createStore","action","newState","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.83d405e2.chunk.js","sourcesContent":["\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nconst text = {\n    compOffer: 'Company is current making their offer',\n    checkingAnswers: 'Checking Answers...',\n    rndOver: 'Round Over',\n    gmeOver: 'Game Over',\n    title: `A Prisoner's Dillema`,\n    teaser: 'Game is about to begin',\n    dispersed: 'Tokens are being dispersed now',\n    notDispersed: 'Tokens are being sen... just kidding'\n}\nclass RoundMeter extends React.Component{\n\n\n    componentDidMount() {\n\n        setTimeout(() => {\n            this.props.dispatch({\n                type: \"GAMESTART\"\n              })\n              \n        }, 4000);\n\n    }\n    \n    componentDidUpdate() {\n        \n        \n        if(this.props.inGame && this.props.isOffering) {\n            setTimeout(() => {\n                this.props.dispatch({\n                    type: \"OFFERGIVEN\"\n                  })\n                  \n            }, 9000);\n    \n        }\n\n        if(this.props.isChoosing && (this.props.timeLeft > 0)) {\n            setTimeout(() => {\n                this.props.dispatch({\n                    type: \"TIMER\"\n                  })\n\n            }, 1000);\n    \n        }\n\n        if(this.props.isChoosing && this.props.timeLeft < 1) {\n            setTimeout(() => {\n                this.props.dispatch({\n                    type: \"NOCHOICE\"\n                  })\n\n            }, 1);\n        }\n  \n        if((!this.props.isChoosing && this.props.timeLeft < 1 && this.props.inGame)) {\n            setTimeout(() => {\n                this.props.dispatch({\n                    type: \"ENDGAME\"\n                  })\n\n            }, 5000);\n        }\n\n        if(((30 - this.props.botTime) > this.props.timeLeft && this.props.click > 0 && !this.props.botReady)){\n            setTimeout(() => {\n                this.props.dispatch({\n                    type: \"SETBOT\"\n                  })\n\n            }, 1);\n        }\n        \n\n    \n    }\n\n\nrender() {\n\n    return (\n        <div className=\"header\">\n            <div className=\"header-inner\">\n            {this.props.inGame ? \n                <h3>Round: {this.props.round.toString()}</h3> : (this.props.endState > 1 ? \n                    (this.props.endState === 2 ?\n                         <h3>{text.rndOver}</h3> : <h3>{text.gmeOver}</h3>) \n                                : <h3>{text.title}</h3>)\n            }\n                {this.props.inGame ? \n                (this.props.isOffering ? <h3>{text.compOffer}</h3> : (this.props.isChoosing ? <h3>Time Left: <span id=\"timeStatus\">{this.props.timeLeft.toString()}</span></h3> : <h3>{text.checkingAnswers}</h3>)) : (this.props.endState > 1 ? \n                    (this.props.endState === 2 ?\n                        <h3>{text.dispersed}</h3>: <h3>{text.notDispersed}</h3>) \n                                : <h3>{text.teaser}</h3>)\n            }\n            </div>\n        </div>\n    );\n}\n};\n\nconst mapStateToProps = (state) =>  ({\n    inGame: state.inGame,\n    isOffering: state.isOffering,\n    isChoosing: state.isChoosing,\n    timeLeft: state.timeLeft,\n    round: state.round,\n    endState: state.endState,\n    botTime: state.botTime,\n    botReady: state.botReady,\n    click: state.click\n});\nexport default connect(mapStateToProps)(RoundMeter);","\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nconst text = {\n    offer: 'Company is offering ',\n    currency: ' tokens\\n',\n    question: ' Company is asking you to\\ngrab or half ',\n    checkingAnswers: 'Answers have been locked in.\\nCompany will determine prize now.',\n    wonGrab: `YOU WIN!\\nwhile the bot decided to split the offerings,\n    you knew they would choose that and took the \n    advantage! you just won `,\n    split: `HALVED!\\n\n    while you decided it would be good faith,\n    the bot also decided to split the offerings \n    you’ve both just earned `,\n    lostGrab: `UH OH!\\n\n    while you wanted the winnings for yourself,\n    the bot also decided on that...\n    game over...`,\n    lostHalf: `UH OH!\\n\n    while you wanted to split the offerings (so kind),\n    the bot had other plans...\n    game over...`\n}\nclass CenterMessage extends React.Component{\n\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.props.dispatch({\n                type: \"SETOFFER\"\n              })\n              console.log(this.props)\n        }, 1000);\n    }\n    \n    componentDidUpdate() {\n        \n     \n    }\n\n    handleRound = () => {\n        this.props.dispatch({\n            type: \"NEXTROUND\"\n          })\n    }\n    handleGameOver = () => {\n        window.location.reload();\n    }\n\n\nrender() {\n    return (\n        <div className=\"center\">\n            <div className=\"center-inner\">\n                {this.props.inGame ? \n                (this.props.isOffering ? <h1>{text.offer}{this.props.offer}{text.currency}</h1> : (this.props.isChoosing ? <h1>For {this.props.offer}{text.currency}{text.question}</h1> : <h1>{text.checkingAnswers}<br />Let's hope choosing to {this.props.choice ? <>grab</> : <>half</>} works out for you...</h1>)) : (this.props.endState > 1 ? \n                    (this.props.endState === 2 ?\n                    <>{this.props.choice  ? <h1 id=\"success\">{text.wonGrab}{this.props.offer}{text.currency}</h1>:<h1 id=\"mid\">{text.split}{Math.round(this.props.offer / 2)}{text.currency}</h1>}<div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"center\"}}><div className=\"nextButton\" onClick={this.handleRound}>Next Round</div></div></>: <>{this.props.choice  ? <h1 id=\"fail\">{text.lostGrab}</h1>:<h1 id=\"fail\">{text.lostHalf}</h1>}<div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"center\"}}><div className=\"nextButton\" onClick={this.handleGameOver}>Reset</div></div></>) \n                                : <h1></h1>)\n            }\n            </div>\n        </div>\n    );\n}\n};\n\nconst mapStateToProps = (state) =>  ({\n    inGame: state.inGame,\n    isOffering: state.isOffering,\n    isChoosing: state.isChoosing,\n    timeLeft: state.timeLeft,\n    round: state.round,\n    endState: state.endState,\n    choice: state.choice,\n    offer: state.offer\n});\nexport default connect(mapStateToProps)(CenterMessage);","import React from 'react';\n\n\nexport default function Tutorial() {\n    function handleReset() {\n        window.location.reload();\n    }\n  \n    return (<div className=\"tutorials\"><p>\n         1. Receive token offer from company <br/><br/>\n         2. You will be asked to grab or half. <br/> <br/>\n         <span style={{fontWeight: '800', textDecoration: 'underline wavy lime'}}>GRAB</span>:<br /> if you grab, you are choosing to the risk of winning <br />the whole prize offer, giving the other opponent none of the prize. \n         <br/><br/> <span style={{fontWeight: '800', textDecoration: 'underline wavy lime'}}>HALF</span>:<br /> if you half, you are choose to the risk of winning<br /> half of the prize offer, giving the other half to your opponent. \n         <br/> <br/><br/>3. Decide if the risk is worth it. If you and your opponent both choose GRAB<br /> then neither of you will receive a prize and the game will be over. If you choose HALF<br /> and your opponent chooses GRAB then they will receive a prize<br /> and you will lose, the game will be over. \n         <br/><br/><br/> 4. This game is 100% chance based, so don’t sweat it</p> <div style={{display: 'flex', flexDirection: 'column', color: 'lightcoral'}}><h1>HOW TO PLAY</h1><h1>GRAB or HALF</h1><p>Created by Rasha Rahman</p><p  style={{color: 'yellow', cursor:'grab'}}onClick={handleReset}>[ Click Here To Reset ]</p></div></div>)\n}","import React from 'react';\nimport Tutorial from './Tutorial';\n\n\nexport default function Header() {\n    const [showTut, setShow] = React.useState(false);\n     function handleClick() {\n        setShow(true);\n    }\nreturn (<div className=\"tutorial\"><div className=\"headers title\"><span onClick={handleClick}id=\"tut\">(HOW TO PLAY)</span><h2>Grab or Half</h2></div>{showTut ? <Tutorial /> : <></>}</div>)\n}","\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nconst styles = {\n    clicked: \"rgb(179, 255, 191)\",\n    grabStat: false,\n    halfStat: false\n}\nclass PlayerHud extends React.Component{\n\n\n    componentDidMount() {\n     \n    }\n    \n    componentDidUpdate() {\n    \n    }\n\n    handleGrab = () => {\n        this.props.dispatch({\n            type: \"SETGRAB\"\n        });\n        styles.grabStat = true;\n        styles.halfStat = false;\n     \n    }\n    handleHalf = () => {\n        this.props.dispatch({\n            type: \"SETHALF\"\n        });\n        styles.halfStat = true;\n        styles.grabStat = false;\n        \n    }\n\n    \n    render() {\n        \n        return (\n            <div className=\"hud\" style={{visibility: (this.props.inGame && !this.props.isOffering && this.props.isChoosing ? \"visible\" : \"hidden\")}}style={{visibility: (this.props.inGame && !this.props.isOffering && this.props.isChoosing ? \"visible\" : \"hidden\")}}>\n            <div className=\"players\">\n            <div className=\"hud\" >\n                <div className=\"hud-inner\">Player 1</div>\n        {this.props.click > 0 ? <div className=\"hud-inner\">You've chosen {this.props.choice ? <>to grab!</> : <>to half!</>}</div> : <div className=\"hud-inner\">Weigh your risks and choose an option</div> }\n              \n                </div>\n                <div className=\"hud\" style={{visibility: (this.props.inGame && !this.props.isOffering && this.props.isChoosing ? \"visible\" : \"hidden\")}}>\n                <div className=\"hud-inner\">Bot</div>\n            \n        <div className=\"hud-inner\">{(30 - this.props.botTime) < this.props.timeLeft ? (<>Is Still Deciding...</>) :( <>Has Made Their Decision</>)}</div>\n              \n        </div>\n            </div>\n            <br />\n            <br />\n            <br />\n           \n            <div className=\"choice-inner\">\n                <div className=\"choice\" onClick={this.handleGrab} style={{backgroundColor: (styles.grabStat ? styles.clicked : \"white\")}}><h6>Grab</h6></div>\n                <div className=\"choice\" onClick={this.handleHalf} style={{backgroundColor: (styles.halfStat ? styles.clicked : \"white\")}}><h6>Half</h6></div>\n                </div>  \n            </div>\n        )\n    };\n    }\n    \n\nconst mapStateToProps = (state) =>  ({\n    inGame: state.inGame,\n    isOffering: state.isOffering,\n    isChoosing: state.isChoosing,\n    timeLeft: state.timeLeft,\n    round: state.round,\n    endState: state.endState,\n    choice: state.choice,\n    offer: state.offer,\n    click: state.click,\n    botTime: state.botTime,\n    botReady: state.botReady\n});\nexport default connect(mapStateToProps)(PlayerHud);","\nimport React from 'react';\nimport { connect } from 'react-redux';\nclass CurrentScoreboard extends React.Component{\n\n\n    componentDidMount() {\n        \n    }\n    \n    componentDidUpdate() {\n        \n     \n    }\n\n    handleGrab = () => {\n        this.props.dispatch({\n            type: \"SETGRAB\"\n        });\n    }\n    handleHalf = () => {\n        this.props.dispatch({\n            type: \"SETHALF\"\n        });\n    }\n    \n    render() {\n        return (\n            <div className=\"scoreboard\">\n                <div className=\"scoreboard-inner\"><h2>Wallet: {this.props.wallet} tokens</h2><h2>Rounds: {this.props.round - 1}</h2></div>\n\n            </div>\n        )\n    };\n    }\n    \n\nconst mapStateToProps = (state) =>  ({\n    wallet: state.wallet,\n    round: state.round\n    \n});\nexport default connect(mapStateToProps)(CurrentScoreboard);","import React from 'react';\nimport './App.css';\nimport RoundMeter from './RoundMeter';\nimport {createStore} from 'redux';\nimport { Provider } from 'react-redux';\nimport CenterMessage from './CenterMessage';\nimport Header from './Header';\nimport PlayerHud from './PlayerHud';\nimport CurrentScoreboard from './CurrentScoreboard';\n\n\nconst initState  =\n{\n    inGame: false,\n    isOffering: true,\n    wallet: 0,\n    isChoosing: false,\n    choice: true,\n    offer: 0,\n    timeLeft: 20,\n    botTime: Math.round((Math.random() * 20)) + 5,\n    round: 1,\n    endState: 1,\n    click: 0,\n    botReady: false\n}\n\nfunction reducer(state = initState, action) {\n  switch(action.type) {\n    case \"GAMESTART\": {\n      const newState = {...state};\n      newState.inGame = true;\n      return newState;\n    };\n    case \"SETGRAB\": {\n      const newState = {...state};\n      newState.choice = true;\n      console.log(\" set\");\n      newState.click = newState.click + 1;\n      return newState;\n    };\n    case \"SETHALF\": {\n      const newState = {...state};\n      newState.choice = false;\n      console.log(\" set\");\n      newState.click = newState.click + 1;\n      return newState;\n    };\n    case \"SETBOT\": {\n      const newState = {...state};\n      newState.botReady = true;\n      newState.timeLeft = 1;\n      console.log(\"bot set\");\n      return newState;\n    };\n    case \"ENDGAME\": {\n      const newState = {...state};\n      newState.inGame = false;\n      newState.timeLeft = 0;\n      newState.endState = Math.round(Math.random() + 2);\n      return newState;\n    };\n    case \"NOCHOICE\": {\n      const newState = {...state};\n      newState.isChoosing = false;\n      return newState;\n    };\n    case \"NEXTROUND\": {\n      const newState = {...state};\n      newState.inGame = true;\n      newState.isOffering = true;\n      newState.timeLeft = 30;\n      newState.wallet = Math.round(newState.choice ? newState.wallet + newState.offer : newState.wallet + (newState.offer / 2) );\n      newState.round++;\n      newState.click = 0;\n      newState.isChoosing = false;\n      newState.offer = Math.round((Math.random() * 2000 ) / 2);\n      newState.botTime = Math.round((Math.random() * 30));\n      newState.botReady = false;\n      return newState;\n    };\n    case \"SETOFFER\": {\n      const newState = {...state};\n      newState.offer = Math.round((Math.random() * 2000 ) / 2);\n      return newState;\n    };\n    case \"OFFERGIVEN\": {\n      const newState = {...state};\n      newState.isOffering = false;\n      newState.isChoosing = true;\n      return newState;\n    };\n    case \"TIMER\": {\n      const newState = {...state};\n      newState.timeLeft = newState.timeLeft - 1;\n      return newState;\n    };\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(reducer);\n\n\n function App() {\n  return (<Provider store={store}>\n        <CurrentScoreboard />\n    <Header />\n    <RoundMeter />\n    <CenterMessage />\n    <PlayerHud />\n\n  </Provider>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}